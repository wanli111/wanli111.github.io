<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小万里工作室</title>
  
  <subtitle>人生若只如初见，何事秋风悲画扇</subtitle>
  <link href="https://wanli111.github.io/atom.xml" rel="self"/>
  
  <link href="https://wanli111.github.io/"/>
  <updated>2024-01-31T09:29:51.487Z</updated>
  <id>https://wanli111.github.io/</id>
  
  <author>
    <name>万里</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wanli111.github.io/2024/02/06/%E5%B9%BB%E5%85%BD%E5%B8%95%E9%B2%81%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/"/>
    <id>https://wanli111.github.io/2024/02/06/%E5%B9%BB%E5%85%BD%E5%B8%95%E9%B2%81%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</id>
    <published>2024-02-06T03:12:20.721Z</published>
    <updated>2024-01-31T09:29:51.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全网最详细CentOS搭建幻兽帕鲁私服教程"><a href="#全网最详细CentOS搭建幻兽帕鲁私服教程" class="headerlink" title="全网最详细CentOS搭建幻兽帕鲁私服教程"></a><strong>全网最详细CentOS搭建幻兽帕鲁私服教程</strong></h1><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1．机器准备"><a href="#1．机器准备" class="headerlink" title="1．机器准备"></a>1．机器准备</h3><p>为了搭建私服，我们首先需要一台云服务器。云服务器的厂商没有特别要求，腾讯云、阿里云、华为云都可以，这里以阿里云为例子</p><p>官方文档推荐的服务器要求CPU4核心内存8GB，所以我们要准备好一个4核8GB的服务器。实测2核4GB的大概在5人左右就特别容易崩溃，<a class="link"   href="https://so.csdn.net/so/search?q=CPU&spm=1001.2101.3001.7020" >CPU <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>占用率在98%，内存占用很快就超过100%溢出，所以想要稳定最低最低也要2核6GB。（之前游戏优化太烂不会自动释放内存的问题，官方在2024-01-30已基本解决）</p><p>第一步是购买云服务器。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172105584.png"                      alt="image-20240131172105584"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172114508.png"                      alt="image-20240131172114508"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172120490.png"                      alt="image-20240131172120490"                ></p><p>这边选择配置的话推荐四核十六GB的服务器，内存太小根本带不动。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172132216.png"                      alt="image-20240131172132216"                ></p><p>系统选择CentOS</p><h3 id="2．机器登录"><a href="#2．机器登录" class="headerlink" title="2．机器登录"></a>2．机器登录</h3><p>有计算机背景的同学可以跳过这部分，比较基础。</p><p>登录云服务器，可以直接用ssh连接，当然也可以用会话管理工具，使用起来会比较方便。个人比较喜欢的一个工具是MobaXterm，这个是官方网站：<a class="link"   href="https://mobaxterm.mobatek.net/" >https://mobaxterm.mobatek.net <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>然后在应用中添加新会话</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172209712.png"                      alt="image-20240131172209712"                ></p><p>会话类型选择SSH</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172222041.png"                      alt="image-20240131172222041"                ></p><p>用户使用root,连接成功后输入root的密码即可</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172231561.png"                      alt="image-20240131172231561"                ></p><p>点击好的，连接后输入密码，即可完成ssh连接</p><p>获取公网ip方法</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172249399.png"                      alt="image-20240131172249399"                ></p><p>获取用户名、设置密码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172258546.png"                      alt="image-20240131172258546"                ></p><h2 id="二、SteamCMD下载"><a href="#二、SteamCMD下载" class="headerlink" title="二、SteamCMD下载"></a>二、SteamCMD下载</h2><h3 id="1．更改账号"><a href="#1．更改账号" class="headerlink" title="1．更改账号"></a>1．更改账号</h3><p>在终端执行以下命令生成一个名为<code>steam</code>的云服务器账号：adduser steam</p><p>再修改指定用户steam的密码：passwd steam</p><p>在窗口提示New password:之后输入新密码（两遍是不显示的）</p><p>赋予新用户权限 usermod -G root steam </p><p>然后切换到普通用户steam，命令：su steam</p><p>最后切换到用户steam的根目录，命令：cd</p><p>2．下载相关资源</p><p>3．运行SteamCMD</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172320236.png"                      alt="image-20240131172320236"                ></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装环境</span></span><br><span class="line">yum install glibc libstdc++ -y</span><br><span class="line">yum install glibc.i686 libstdc++.i686 -y</span><br><span class="line">yum install screen -y </span><br><span class="line"><span class="built_in">mkdir</span> ~/Steam &amp;&amp; <span class="built_in">cd</span> ~/Steam <span class="comment">#为 SteamCMD 创建目录并切换至该目录。 </span></span><br><span class="line"><span class="comment">#下载并解压缩适用于 Linux 的 SteamCMD</span></span><br><span class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar xvf steamcmd_linux.tar.gz</span><br><span class="line"><span class="comment">#继续安装SteamCMD</span></span><br><span class="line">./steamcmd.sh </span><br></pre></td></tr></table></figure></div><p>下载完成后，命令行会变成以Steam&gt;开头。</p><p>注： 如果提示bash: wget: command not found，则需要用命令su root切换到root账户再安装wget下载工具，命令：yum install wget -y，安装之后再切换回steam账户的根目录</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steam &gt;login anonymous </span><br></pre></td></tr></table></figure></div><p>PS:出现 Retrying 按ctrl+c退出 重新运行SteamCMD继续登陆，直到出现OK为止！ </p><h1 id="三、Palserver下载"><a href="#三、Palserver下载" class="headerlink" title="三、Palserver下载"></a>三、Palserver下载</h1><p>幻兽帕鲁最近在社区呈现了爆火的趋势，在线人数已突破百万级别。为了和小伙伴愉快的玩耍，有一定财力的小伙伴，搭建一个私人服务器是一个最稳定而舒服的解决方案。本文章将讲解一下如何利用CentOS搭建幻兽帕鲁的私服（专用服务器），如果有不明白的，可以参考官方文档作为补充：<a class="link"   href="https://tech.palworldgame.com/dedicated-server-guide" >https://tech.palworldgame.com/dedicated-server-guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>总步骤分为三步：准备机器，下载SteamCMD，以及下载PalServer。</p><p>下载幻兽帕鲁服务端 app_update 2394010 </p><p>下载服务器依赖 app_update 1007 </p><p>退出SteamCMD quit </p><p>建立库链接： </p><p>steamcmd会在&#x2F;home&#x2F;steam&#x2F;目录下生成.steam文件夹或者Steam文件夹，新版本生成的文件夹都是Steam，要注意如果没有生成.steam文件夹，要手动创建一个</p><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建.steam文件夹 </span></span><br><span class="line"><span class="built_in">mkdir</span> /home/steam/.steam </span><br><span class="line"><span class="comment">#新建sdk64文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /home/steam/.steam/sdk64</span><br><span class="line"><span class="built_in">cp</span> -r /home/steam/Steam/steamapps/common/Steamworks\ SDK\ Redist/linux64/steamclient.so /home/steam/.steam/sdk64</span><br><span class="line"><span class="comment">#启动游戏</span></span><br><span class="line">screen</span><br><span class="line"><span class="built_in">cd</span> /home/steam/Steam/steamapps/common/PalServer</span><br><span class="line">./PalServer.sh</span><br></pre></td></tr></table></figure></div><p>启动成功后，会在此路径下生成ini配置文件：Pal&#x2F;Saved&#x2F;Config&#x2F;Linuxserver&#x2F;PalWorldSettings.ini</p><p>配置服务的ini不是强制的，如果没有特别要求，可以直接跳过该步骤，游戏会自动使用默认的配置。再次启动PalServer前可以修改一下配置文件，可以把默认的配置文件DefaultPalWorldSettings.ini 拷贝一份，重命名为PalWorldSettings.ini，然后手动修改里面的内容，用vim修改内容。命令：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Steam/steamApps/common/PalServer</span><br><span class="line"><span class="built_in">cp</span> ./DefaultPalWorldSettings.ini Pal/Saved/Config/Linuxserver/PalWorldSettings.ini</span><br><span class="line">vim Pal/Saved/Config/LinuxServer/PalWorldSettings.ini</span><br></pre></td></tr></table></figure></div><p>Vim的使用方法可以上网找</p><p>修改完配置后，回到根目录处输入命令：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -S PalServer</span><br><span class="line">./PalServer.sh</span><br><span class="line"><span class="comment">#Ctrl+A+D将进程保存至后台</span></span><br></pre></td></tr></table></figure></div><h2 id="关闭服务器"><a href="#关闭服务器" class="headerlink" title="关闭服务器"></a>关闭服务器</h2><p>1.在根目录处输入命令：screen -ls</p><p> 2.找到相应的进程，输入screen -r XXXXXXXXXX，比如我这里24871.PalServer，就输入screen -24871.PalServer，就可以重新回到面板里</p><p>按下Ctrl+C就可以关闭服务器了</p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>在图下位置输入你的服务器公网IP地址+端口号（默认是8211）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172425076.png"                      alt="image-20240131172425076"                ></p><p>输入完之后可能会报错</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172433881.png"                      alt="image-20240131172433881"                ></p><p>耐心等待一段时间后，点进最近访问过的服务器列表，就可以看到你想进入的服务器了，输入密码，就可以开始游戏了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\万里\AppData\Roaming\Typora\typora-user-images\image-20240131172442684.png"                      alt="image-20240131172442684"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全网最详细CentOS搭建幻兽帕鲁私服教程&quot;&gt;&lt;a href=&quot;#全网最详细CentOS搭建幻兽帕鲁私服教程&quot; class=&quot;headerlink&quot; title=&quot;全网最详细CentOS搭建幻兽帕鲁私服教程&quot;&gt;&lt;/a&gt;&lt;strong&gt;全网最详细CentOS搭建幻兽</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wanli111.github.io/2024/01/14/docker%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wanli111.github.io/2024/01/14/docker%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-01-14T08:59:35.415Z</published>
    <updated>2023-11-08T17:22:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-详细教程"><a href="#Docker-详细教程" class="headerlink" title="Docker 详细教程"></a>Docker 详细教程</h3><h3 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h3><h4 id="1-1-docker是什么"><a href="#1-1-docker是什么" class="headerlink" title="1.1 docker是什么"></a>1.1 docker是什么</h4><p>【问题】：问什么会有docker出现</p><p>​Docker的出现 使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。 </p><p>【docker理念】：解决了运行环境和配置问题的软件容器，方便持续继承并有助于整体发布的容器虚拟化技术。</p><h4 id="1-2-容器与虚拟机比较"><a href="#1-2-容器与虚拟机比较" class="headerlink" title="1.2 容器与虚拟机比较"></a>1.2 容器与虚拟机比较</h4><h5 id="1-2-1-容器发展简史"><a href="#1-2-1-容器发展简史" class="headerlink" title="1.2.1 容器发展简史"></a>1.2.1 容器发展简史</h5><p>￼￼￼<img                       lazyload                     src="/images/loading.svg"                     data-src="/images/1.png"                      alt="1"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/2.png"                      alt="2"                ></p><h5 id="1-2-2-传统虚拟机技术"><a href="#1-2-2-传统虚拟机技术" class="headerlink" title="1.2.2 传统虚拟机技术"></a>1.2.2 传统虚拟机技术</h5><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。 </p><p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows10系统里面运行Linux系统CentOS7。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。  </p><table><thead><tr><th>Win10</th><th>VMWare</th><th>Centos7</th><th>各种cpu、内存网络额配置+各种软件</th><th>虚拟机实例</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>虚拟机的缺点： </p><p>1   资源占用多         2   冗余步骤多          3   启动慢 </p><h5 id="1-2-3-容器虚拟化技术"><a href="#1-2-3-容器虚拟化技术" class="headerlink" title="1.2.3 容器虚拟化技术"></a>1.2.3 容器虚拟化技术</h5><p>由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术： </p><p>Linux容器(Linux Containers，缩写为 LXC) </p><p>Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。 </p><p>Linux 容器不是模拟一个完整的操作系统 而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。 容器与虚拟机不同，不需要捆绑一整套操作系统 ，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。 </p><h5 id="1-2-4-对比"><a href="#1-2-4-对比" class="headerlink" title="1.2.4 对比"></a>1.2.4 对比</h5><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/3.png"                      alt="3"                ></p><p>比较了 Docker 和传统虚拟化方式的不同之处： </p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程； 容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核 且也没有进行硬件虚拟 。因此容器要比传统虚拟机更为轻便。 每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。  </p><h4 id="1-3-能干什么"><a href="#1-3-能干什么" class="headerlink" title="1.3 能干什么"></a>1.3 能干什么</h4><h5 id="1-3-1-技术职级变化"><a href="#1-3-1-技术职级变化" class="headerlink" title="1.3.1 技术职级变化"></a>1.3.1 技术职级变化</h5><p>coder -&gt; programmer -&gt; software engineer -&gt; DevOps engineer</p><h5 id="1-3-2-开发-运维（Devops-新一代开发工程师"><a href="#1-3-2-开发-运维（Devops-新一代开发工程师" class="headerlink" title="1.3.2 开发&#x2F;运维（Devops)新一代开发工程师"></a>1.3.2 开发&#x2F;运维（Devops)新一代开发工程师</h5><ul><li>一次构建、随处运行</li><li>更快速的应用交付和部署</li><li>更便捷的升级和扩缩容</li><li>更简单的系统运维</li><li>更高效的计算资源利用</li></ul><h5 id="1-3-3-Docker应用场景"><a href="#1-3-3-Docker应用场景" class="headerlink" title="1.3.3 Docker应用场景"></a>1.3.3 Docker应用场景</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/4.png"                      alt="4"                ></p><p>Docker 借鉴了标砖集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><h4 id="1-4-那些企业在使用"><a href="#1-4-那些企业在使用" class="headerlink" title="1.4 那些企业在使用"></a>1.4 那些企业在使用</h4><ul><li><p>新浪</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/5.png"                      alt="5"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/6.png"                      alt="6"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/7.png"                      alt="7"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/8.png"                      alt="8"                ></p></li><li><p>美团</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/9.png"                      alt="9"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/10.png"                      alt="10"                ></p><ul><li>蘑菇街</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/11.png"                      alt="11"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/12.png"                      alt="12"                ></p><h4 id="1-5-下载地址"><a href="#1-5-下载地址" class="headerlink" title="1.5 下载地址"></a>1.5 下载地址</h4><p>官网：<a class="link"   href="http://www.docker.com/" >http://www.docker.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Docker Hub 官网：<a class="link"   href="https://hub.docker.com/" >https://hub.docker.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h3><h4 id="2-1-前提说明"><a href="#2-1-前提说明" class="headerlink" title="2.1 前提说明"></a>2.1 前提说明</h4><h5 id="2-1-1-CentOS-Docker-安装"><a href="#2-1-1-CentOS-Docker-安装" class="headerlink" title="2.1.1 CentOS Docker 安装"></a>2.1.1 <strong>CentOS Docker</strong> <strong>安装</strong></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/13.png"                      alt="13"                ></p><h5 id="2-1-2-前提条件"><a href="#2-1-2-前提条件" class="headerlink" title="2.1.2 前提条件"></a>2.1.2 前提条件</h5><p>目前，CentOS仅发行版本中的内核支持Docker。Docker运行在CentOS 7（64-bit）上，要求系统为64位，Linux系统内核版本为3.8以上，这里选用Centos7.x</p><h5 id="2-1-3-查看自己的内核"><a href="#2-1-3-查看自己的内核" class="headerlink" title="2.1.3 查看自己的内核"></a>2.1.3 查看自己的内核</h5><p>uname 命令用于打印当前系统相关信息（内核版本号，硬件架构，主机名称和操作系统类型等）。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/14.png"                      alt="14"                ></p><h4 id="2-2-Docker的基本组成"><a href="#2-2-Docker的基本组成" class="headerlink" title="2.2 Docker的基本组成"></a>2.2 Docker的基本组成</h4><h5 id="2-2-1-镜像（image）"><a href="#2-2-1-镜像（image）" class="headerlink" title="2.2.1 镜像（image）"></a>2.2.1 镜像（image）</h5><p>Docker 镜像（Image）就是一个 <strong>只读</strong> 的模板。镜像可以用来创建 Docker 容器， 一个镜像可以创建很多容器 。 </p><p>它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。 </p><p>相当于容器的“源代码”， docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。</p><h5 id="2-2-2-容器（container）"><a href="#2-2-2-容器（container）" class="headerlink" title="2.2.2 容器（container）"></a>2.2.2 容器（container）</h5><ul><li>从面向对象角度</li></ul><p>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境， 容器是用镜像创建的运行实例 。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境 ，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台 </p><ul><li>从镜像容器角度</li></ul><p><strong>可以把容器看做是一个简易版的</strong> *<strong>Linux*</strong> <strong>环境</strong> （包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。 </p><h5 id="2-2-3-仓库（repository）"><a href="#2-2-3-仓库（repository）" class="headerlink" title="2.2.3 仓库（repository）"></a>2.2.3 仓库（repository）</h5><p>仓库（Repository）是 集中存放镜像 文件的场所。 </p><p>类似于 </p><p>Maven仓库，存放各种jar包的地方； </p><p>github仓库，存放各种git项目的地方； </p><p>Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。 </p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。 </p><p>最大的公开仓库是 Docker Hub(<a class="link"   href="https://hub.docker.com/" >https://hub.docker.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>) ， </p><p>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等 </p><h5 id="2-2-4-小总结"><a href="#2-2-4-小总结" class="headerlink" title="2.2.4 小总结"></a>2.2.4 小总结</h5><ul><li>需要正确的理解仓库&#x2F;镜像&#x2F;容器这几个概念:</li></ul><p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。 </p><p>image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。 </p><ul><li>镜像文件</li></ul><p>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。 </p><ul><li>容器实例</li></ul><p>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器 。</p><ul><li>仓库</li></ul><p>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。 </p><h4 id="2-3-Docker平台架构图解（入门版）"><a href="#2-3-Docker平台架构图解（入门版）" class="headerlink" title="2.3 Docker平台架构图解（入门版）"></a>2.3 Docker平台架构图解（入门版）</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/15.png"                      alt="15"                ></p><h5 id="2-3-1-Docker工作原理"><a href="#2-3-1-Docker工作原理" class="headerlink" title="2.3.1 Docker工作原理"></a>2.3.1 Docker工作原理</h5><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器 。 容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysql演示对比讲解 </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/16.png"                      alt="16"                ></p><h5 id="2-3-2-整体架构及底层通信原理简述"><a href="#2-3-2-整体架构及底层通信原理简述" class="headerlink" title="2.3.2 整体架构及底层通信原理简述"></a>2.3.2 整体架构及底层通信原理简述</h5><p>Docker是一个C&#x2F;S模式的架构，后端是一个松耦合架构，众多模块各司其职</p><h5 id="2-3-3-Docker运行的基本流程为："><a href="#2-3-3-Docker运行的基本流程为：" class="headerlink" title="2.3.3 Docker运行的基本流程为："></a>2.3.3 Docker运行的基本流程为：</h5><ol><li>用户是使用Docker Client 与Docker Daemon 建立通信，并发送请求给后者。</li><li>Docker Daemon 作为Docker架构中的主体部分，首先提供Docker Server 的功能时期可以接受 Docker Client的请求。</li><li>Docker Engine 执行Docker内部的一些列工作，每一项工作都是以一个Job的形式的存在。</li><li>Job的运行过程中，当需要容器镜像是，则从Docker Register中下载镜像，并通过镜像管理驱动Graph driver 将下载镜像以Graph的形式存储。</li><li>当需要为Docker创建网络环境时，通过网络驱动Network driver创建并配置Docker容器网络环境。</li><li>当需要限制Docker容器运行资源或执行用户指令等操作时，则通过Exec driver来完成。</li><li>Libcontainer是一项独立的容器管理包，Network driver以及Exec driver都是通过Libcontainer来实现具体容器进行的操作。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/17.png"                      alt="17"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/18.png"                      alt="18"                ></p><h4 id="2-4、安装步骤"><a href="#2-4、安装步骤" class="headerlink" title="2.4、安装步骤"></a>2.4、安装步骤</h4><h5 id="2-4-1-CentOS7安装Docker"><a href="#2-4-1-CentOS7安装Docker" class="headerlink" title="2.4.1 CentOS7安装Docker"></a>2.4.1 CentOS7安装Docker</h5><ol><li>确定你是CentOS7以上版本</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看CentOS版本命令</span></span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure></div><ol start="2"><li><p>卸载旧版本</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/19.png"                      alt="19"                ></p></li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载旧版本docker命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum remove docker \</span></span><br><span class="line"><span class="language-bash">docker-client \</span></span><br><span class="line"><span class="language-bash">docker-client-latest \</span></span><br><span class="line"><span class="language-bash">docker-common \</span></span><br><span class="line"><span class="language-bash">docker-latest \</span></span><br><span class="line"><span class="language-bash">docker-latest-logrotate \</span></span><br><span class="line"><span class="language-bash">docker-logrotate \</span></span><br><span class="line"><span class="language-bash">docker-engine</span></span><br></pre></td></tr></table></figure></div><ol start="3"><li>yum安装gcc相关命令</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装gcc相关命令</span></span><br><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></div><ol start="4"><li><p>安装需要的软件包</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="images/20.png"                      alt="20" style="zoom:50%;"                 ><strong>使用存储库安装</strong></p></li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在新主机上首次安装Docker Engine之前，您需要设置Docker存储库。之后，您可以从存储库安装和更新Docker</span><br><span class="line">设置存储库</span><br><span class="line">安装 yum-utils 包（提供yum-config-manager 实用程序）并设置稳定的存储库</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官网要求</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></div><ol start="5"><li><p>设置stable镜像仓库</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/21.png"                      alt="21"                ></p></li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推荐使用 使用阿里的 docker 镜像仓库，国外的镜像仓库是比较慢的</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div><ol start="6"><li>更新yum软件包索引</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></div><ol start="7"><li>安装DOCKER CE 引擎</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></div><ol start="8"><li>启动docker</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></div><ol start="9"><li>测试</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">docker version </span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/22.png"                      alt="22"                ></p><ol start="10"><li>卸载</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载命令</span></span><br><span class="line">systemctl stop docker </span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure></div><h4 id="2-5、阿里云镜像加速"><a href="#2-5、阿里云镜像加速" class="headerlink" title="2.5、阿里云镜像加速"></a>2.5、阿里云镜像加速</h4><h4 id="2-5-1-是什么"><a href="#2-5-1-是什么" class="headerlink" title="2.5.1 是什么"></a>2.5.1 是什么</h4><ul><li><p>地址：<a class="link"   href="https://promotion.aliyun.com/ntms/act/kubernetes.html" >https://promotion.aliyun.com/ntms/act/kubernetes.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>注册一个属于自己的阿里云账户</p></li><li><p>获得加速器地址连接：</p><ol><li>登陆阿里云开发者平台</li><li>点击控制台</li><li>选择容器镜像服务</li><li>获取加速器地址</li></ol></li><li><p>粘贴脚本直接执行</p></li></ul><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker </span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123; </span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://aa25jngu.mirror.aliyuncs.com&quot;] </span><br><span class="line">&#125; </span><br><span class="line">EOF </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/23.png"                      alt="23"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者分开步骤执行</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></div><ul><li>重启服务器</li></ul><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务器</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></div><h4 id="2-5-2-永远的HelloWorld"><a href="#2-5-2-永远的HelloWorld" class="headerlink" title="2.5.2 永远的HelloWorld"></a>2.5.2 永远的HelloWorld</h4><p>启动Docker后台容器（测试运行 hello-world）</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/24.png"                      alt="24"                ></p><h4 id="2-5-3-底层原理"><a href="#2-5-3-底层原理" class="headerlink" title="2.5.3 底层原理"></a>2.5.3 底层原理</h4><p>为什么Docker会比VM虚拟机快:</p><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">(1)docker有着比虚拟机更少的抽象层</span> <span class="string"></span></span><br><span class="line"><span class="attr">   由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</span> <span class="string"></span></span><br><span class="line"><span class="attr">(2)docker利用的是宿主机的内核,而不需要加载操作系统OS内核</span> <span class="string"></span></span><br><span class="line"><span class="attr">   当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/25.png"                      alt="25"                ></p><h3 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h3><h4 id="3-1-帮助启动类命令"><a href="#3-1-帮助启动类命令" class="headerlink" title="3.1 帮助启动类命令"></a>3.1 帮助启动类命令</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止命令</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启命令</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 概要信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker 总体帮助文档</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker命令帮助文档：</span></span><br><span class="line">docker 具体命令 --help</span><br></pre></td></tr></table></figure></div><h4 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h4><h5 id="3-2-1-docker-images"><a href="#3-2-1-docker-images" class="headerlink" title="3.2.1 docker images"></a>3.2.1 docker images</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地主机上的镜像</span></span><br><span class="line">docker images </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/26.png"                      alt="26"                ></p><p>各个选项说明: </p><ul><li><p>REPOSITORY：表示镜像的仓库源 </p></li><li><p>TAG：镜像的标签版本号 </p></li><li><p>IMAGE ID：镜像ID </p></li><li><p>CREATED：镜像创建时间 </p></li><li><p>SIZE：镜像大小</p></li></ul><p> 同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。 </p><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像 </p><h5 id="3-2-2-OPTIONS-说明"><a href="#3-2-2-OPTIONS-说明" class="headerlink" title="3.2.2 OPTIONS 说明"></a>3.2.2 OPTIONS 说明</h5><p>-a :  列出本地所有的镜像（含历史映像层）</p><p>-q：只显示镜像ID</p><h5 id="3-2-3-docker-search-某个XXX镜像名字"><a href="#3-2-3-docker-search-某个XXX镜像名字" class="headerlink" title="3.2.3 docker search 某个XXX镜像名字"></a>3.2.3 docker search 某个XXX镜像名字</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网站</span></span><br><span class="line">https://hub.docker.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker search [OPTIONS]镜像名字</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">limit</span> ：只列出N个镜像，默认25个</span></span><br><span class="line">docker search  --limit 5 redis</span><br></pre></td></tr></table></figure></div><p>案例：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/27.png"                      alt="27"                ></p><h5 id="3-2-4-docker-pull-某个XXX镜像名字"><a href="#3-2-4-docker-pull-某个XXX镜像名字" class="headerlink" title="3.2.4 docker pull 某个XXX镜像名字"></a>3.2.4 docker pull 某个XXX镜像名字</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像</span></span><br><span class="line"> docker pull 镜像名字[:TAG]</span><br><span class="line"> </span><br><span class="line"> docker pull  镜像名字 </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">没有TAG就是最新版本 等价于</span></span><br><span class="line"> docker pull 镜像名字：latest</span><br><span class="line"> docker pull ubuntu </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/28.png"                      alt="28"                ></p><h5 id="3-2-5-docker-system-df-查看镜像-容器-数据卷所占用的空间"><a href="#3-2-5-docker-system-df-查看镜像-容器-数据卷所占用的空间" class="headerlink" title="3.2.5 docker system df 查看镜像&#x2F;容器&#x2F;数据卷所占用的空间"></a>3.2.5 docker system df 查看镜像&#x2F;容器&#x2F;数据卷所占用的空间</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/29.png"                      alt="29"                ></p><h5 id="3-2-6-docker-rmi-删除镜像"><a href="#3-2-6-docker-rmi-删除镜像" class="headerlink" title="3.2.6 docker rmi 删除镜像"></a>3.2.6 docker rmi 删除镜像</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除单个</span></span><br><span class="line">docker rmi -f 镜像ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多个</span></span><br><span class="line">docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部</span></span><br><span class="line">docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure></div><h5 id="3-2-7-谈谈docker虚悬镜像是什么？"><a href="#3-2-7-谈谈docker虚悬镜像是什么？" class="headerlink" title="3.2.7 谈谈docker虚悬镜像是什么？"></a>3.2.7 谈谈docker虚悬镜像是什么？</h5><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">仓库名称，标签都是&lt;none&gt;的镜像，俗称虚悬镜像dangling</span> <span class="string">image</span></span><br><span class="line"><span class="attr">长什么样子</span></span><br><span class="line"><span class="attr">后续Dockerfile章节在介绍</span></span><br></pre></td></tr></table></figure></div><h4 id="3-3-容器命令"><a href="#3-3-容器命令" class="headerlink" title="3.3 容器命令"></a>3.3 容器命令</h4><blockquote><p>有镜像才能创建容器，这是根本前提（下载一个CentOS或者ubuntu镜像演示）</p><h5 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/30.png"                      alt="30"                ></p><h5 id="2-docker-pull-centos"><a href="#2-docker-pull-centos" class="headerlink" title="2.docker pull centos"></a>2.docker pull centos</h5><h5 id="3-docker-pull-ubuntu"><a href="#3-docker-pull-ubuntu" class="headerlink" title="3.docker pull ubuntu"></a>3.docker pull ubuntu</h5><h5 id="4-本次演示用ubuntu演示"><a href="#4-本次演示用ubuntu演示" class="headerlink" title="4.本次演示用ubuntu演示"></a>4.本次演示用ubuntu演示</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/31.png"                      alt="31"                ></p></blockquote><h5 id="3-3-1-新建-启动容器"><a href="#3-3-1-新建-启动容器" class="headerlink" title="3.3.1 新建+启动容器"></a>3.3.1 新建+启动容器</h5><blockquote><h6 id="新建-启动容器-命令"><a href="#新建-启动容器-命令" class="headerlink" title="新建+启动容器 命令"></a>新建+启动容器 命令</h6><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><h6 id="OPTIONS说明"><a href="#OPTIONS说明" class="headerlink" title="OPTIONS说明"></a>OPTIONS说明</h6><p> OPTIONS说明（常用）：有些是一个减号，有些是两个减号 </p><p>–name&#x3D;”容器新名字”       为容器指定一个名称；<br>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)； </p><p>-i：以交互模式运行容器，通常与 -t 同时使用；<br>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>也即 启动交互式容器(前台有伪终端，等待交互) ； </p><p>-P:  随机 端口映射，大写P<br>-p:  指定 端口映射，小写p </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/32.png"                      alt="32"                ></p></blockquote><blockquote><p>启动交互式容器（前台命令行）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/33.png"                      alt="33"                ></p><p>使用镜像centos:latest以 交互模式 启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。 </p><p><strong>docker run -it centos &#x2F;bin&#x2F;bash</strong> </p><p>参数说明： </p><ul><li><p>-i: 交互式操作。</p></li><li><p>-t: 终端。 </p></li><li><p>centos : centos 镜像。</p></li><li><p>&#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。 要退出终端，直接输入 exit:</p></li></ul></blockquote><h5 id="3-3-2-列出当前所有正在运行的容器"><a href="#3-3-2-列出当前所有正在运行的容器" class="headerlink" title="3.3.2 列出当前所有正在运行的容器"></a>3.3.2 列出当前所有正在运行的容器</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前所有正在运行的容器</span></span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明</span></span><br><span class="line">-a : 列出当前所有 正在运行 的容器 + 历史上运行过 的 </span><br><span class="line">-l :显示最近创建的容器。 </span><br><span class="line">-n：显示最近n个创建的容器。 </span><br><span class="line">-q :静默模式，只显示容器编号。 </span><br></pre></td></tr></table></figure></div><h5 id="3-3-3-退出容器"><a href="#3-3-3-退出容器" class="headerlink" title="3.3.3 退出容器"></a>3.3.3 退出容器</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两种退出方式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、run进去容器，<span class="built_in">exit</span>退出，容器停止</span></span><br><span class="line">exit </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、run进去容器，ctrl+p+q退出，容器不停止</span></span><br><span class="line">ctrl+p+q</span><br></pre></td></tr></table></figure></div><h5 id="3-3-4-启动已停止运行的容器"><a href="#3-3-4-启动已停止运行的容器" class="headerlink" title="3.3.4 启动已停止运行的容器"></a>3.3.4 启动已停止运行的容器</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已停止运行的容器</span></span><br><span class="line">docker start 容器ID或者容器名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart 容器ID或者容器名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop 容器ID或者容器名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制停止容器</span></span><br><span class="line">docker kill 容器ID或容器名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除已停止的容器</span></span><br><span class="line">docker rm 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一次性删除多个容器实例</span></span><br><span class="line">docker rm -rf $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">docker ps -a -q | xargs docker rm</span><br></pre></td></tr></table></figure></div><h5 id="3-3-5-重要"><a href="#3-3-5-重要" class="headerlink" title="3.3.5 重要"></a>3.3.5 重要</h5><p><strong>启动守护式容器（后台服务器）：</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">有镜像才能创建容器，这是根本前提（下载一个Redis6.0.8镜像演示）</span><br><span class="line"></span><br><span class="line">在大部分的场景下，我们希望docker的服务是在后台运行的，我们可以通过 -d 指定容器的后台运行模式。</span><br><span class="line"></span><br><span class="line">docker run -d 容器名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用镜像centos:latest以后台模式启动一个容器</span> </span><br><span class="line">docker run -d centos </span><br><span class="line">  </span><br><span class="line">问题：然后docker ps -a 进行查看,  会发现容器已经退出 </span><br><span class="line">很重要的要说明的一点:  Docker容器后台运行,就必须有一个前台进程. </span><br><span class="line">容器运行的命令如果不是那些 一直挂起的命令 （比如运行top，tail），就是会自动退出的。 </span><br><span class="line">  </span><br><span class="line">这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下, </span><br><span class="line">我们配置启动服务只需要启动响应的service即可。例如service nginx start </span><br><span class="line">但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用, </span><br><span class="line">这样的容器后台启动后,会立即自杀因为他觉得他没事可做了. </span><br><span class="line">所以，最佳的解决方案是, 将你要运行的程序以前台进程的形式运行， </span><br><span class="line">常见就是命令行模式，表示我还有交互操作，别中断，O(∩_∩)O哈哈~ </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>redis前后台启动演示case</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前台交互式启动</span></span><br><span class="line">docker run -it redis:6.0.8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台交互式启动</span></span><br><span class="line">docker run -d redis:6.0.8</span><br></pre></td></tr></table></figure></div><p><strong>查看容器日志</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器日志</span></span><br><span class="line">docker logs 容器ID</span><br></pre></td></tr></table></figure></div><p><strong>查看容器内运行的进程</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器内运行的进程</span></span><br><span class="line">docker top 容器ID</span><br></pre></td></tr></table></figure></div><p><strong>查看容器内部细节</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器内部细节</span></span><br><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure></div><p><strong>进入正在运行的容器并以命令行交互</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID bashShell</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/34.png"                      alt="34"                ></p><blockquote><p>重新进入docker attach 容器ID</p><p>案例演示，用centos或者unbuntu都可以<br><strong>上述两个区别：</strong></p><ol><li>attach 直接进入容器启动命令的终端，不会启动新的进程用exit退出，会导致容器的停止。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/35.png"                      alt="35"                >2. exec 是在容器中打开新的终端，并且可以启动新的进程用exit退出，不会导致容器的停止。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/36.png"                      alt="36"                ></p><p>推荐大家使用docker exec 命令，因为退出容器终端，不会导致容器的停止。</p><p><strong>使用之前的redis容器实例进入试试</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">docker exec -it 容器ID redis-cli</span><br><span class="line"></span><br><span class="line">一般用-d后台启动的程序，在用exec进入对应容器实例</span><br></pre></td></tr></table></figure></div></blockquote><p><strong>从容器内拷贝文件到主机上</strong></p><blockquote><p>容器 -&gt; 主机</p><p>docker cp 容器ID:容器内路径  目的主机路径</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/37.png"                      alt="37"                ></p><p>公式： docker cp  容器 ID: 容器内路径  目的主机路径</p></blockquote><p><strong>导入和导出容器</strong></p><blockquote><p>Export 导出容器的内容留作为一个tar归档文件[对应import命令]</p><p>import 从tar 包中的内容创建一个新的文件系统在导入为镜像[对应export]</p><p>【案例】：</p><p>docker export 容器ID  &gt; 文件.tar </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/38.png"                      alt="38"                ></p><p>cat 文件名.tar  | docker  import  -镜像用户&#x2F;镜像名:镜像版本号</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/39.png"                      alt="39"                ></p></blockquote><h4 id="3-4-小总结"><a href="#3-4-小总结" class="headerlink" title="3.4 小总结"></a>3.4 小总结</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/40.png"                      alt="40"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像 </span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像 </span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像 </span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中 </span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器 </span><br><span class="line">diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化 </span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件 </span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令 </span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ] </span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史 </span><br><span class="line">images    List images                                   # 列出系统当前镜像 </span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export] </span><br><span class="line">info      Display system-wide information               # 显示系统相关信息 </span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息 </span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器 </span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save] </span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器 </span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出 </span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息 </span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口 </span><br><span class="line">pause     Pause all processes within a container        # 暂停容器 </span><br><span class="line">ps        List containers                               # 列出容器列表 </span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像 </span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器 </span><br><span class="line">restart   Restart a running container                   # 重启运行的容器 </span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器 </span><br><span class="line">rmi       Remove one or more images       # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] </span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令 </span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load] </span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像 </span><br><span class="line">start     Start a stopped containers                    # 启动容器 </span><br><span class="line">stop      Stop a running containers                     # 停止容器 </span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签 </span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息 </span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器 </span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号 </span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值 </span><br></pre></td></tr></table></figure></div><h3 id="四、Docker镜像"><a href="#四、Docker镜像" class="headerlink" title="四、Docker镜像"></a>四、Docker镜像</h3><h4 id="4-1-是什么"><a href="#4-1-是什么" class="headerlink" title="4.1 是什么"></a>4.1 是什么</h4><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">【镜像】</span> <span class="string"></span></span><br><span class="line"><span class="attr">是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。</span> <span class="string"></span></span><br><span class="line"><span class="attr">只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">【分层镜像】</span></span><br><span class="line"><span class="attr">以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载</span> <span class="string">。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">【UnionFS（联合文件系统）】</span></span><br><span class="line"><span class="attr">UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持</span> <span class="string">对文件系统的修改作为一次提交来一层层的叠加， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。 镜像可以通过分层来进行继承 ，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</span> <span class="string"></span></span><br></pre></td></tr></table></figure></div><p><strong>Docker镜像加载原理</strong></p><blockquote><p> Docker镜像加载原理： </p><p>  docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。 </p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统， 在Docker镜像的最底层是引导文件系统bootfs。 这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。 </p><p>rootfs (root file system) ，在bootfs之上 。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/41.png"                      alt="41"                ></p><p> 平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？ </p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/42.png"                      alt="42"                ></p><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。 </p></blockquote><p><strong>为什么Docker镜像要采用这种分层结构呢</strong></p><blockquote><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。 </p><p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p></blockquote><h4 id="4-2-重点理解"><a href="#4-2-重点理解" class="headerlink" title="4.2 重点理解"></a>4.2 重点理解</h4><blockquote><p>Docker镜像层都是只读的，容器层是可写的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作”容器层”，”容器层”之下的都叫”镜像层”。</p><p>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/43.png"                      alt="43"                ></p></blockquote><h4 id="4-3-Docker镜像commit操作案例"><a href="#4-3-Docker镜像commit操作案例" class="headerlink" title="4.3 Docker镜像commit操作案例"></a>4.3 Docker镜像commit操作案例</h4><blockquote><p>docker commit 提交容器副本使之成为一个新的镜像</p><p>docker commit -m&#x3D;”提交的描述信息” -a&#x3D;”作者” 容器ID  要创建的目标镜像名:[标签名]</p><p>【案例演示】ubuntu安装vim</p><ol><li>从Hub上下ubuntu镜像到笨地并成功运行</li><li>原始默认Ubuntu镜像是不带着vim命令的</li><li>外网连通情况下，安装vim</li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先更新我们的包管理工具</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后安装我们需要的vim</span></span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure></div><p>docker容器内执行上述两条命令： </p><p>apt-get update </p><p>apt-get -y install vim </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/44.png"                      alt="44"                ></p><ol start="4"><li><p>安装完成后，commit我们自己的新镜像</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/45.png"                      alt="45"                ></p></li><li><p>启动我们的新镜像并和原来的对比</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/46.png"                      alt="46"                ></p><p>官网是默认下载的Ubuntu没有vim命令 </p><p>我们自己commit构建的镜像，新增加了vim功能，可以成功使用。</p></li></ol></blockquote><p><strong>总结</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Docker中的镜像分层， 支持通过扩展现有镜像，创建新的镜像 。类似Java继承于一个Base基础类，自己再按需扩展。 </span><br><span class="line">新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层 </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/47.png"                      alt="47"                ></p><h3 id="五、本地镜像发布到阿里云"><a href="#五、本地镜像发布到阿里云" class="headerlink" title="五、本地镜像发布到阿里云"></a>五、本地镜像发布到阿里云</h3><h4 id="5-1-本地镜像发布到阿里云流程"><a href="#5-1-本地镜像发布到阿里云流程" class="headerlink" title="5.1 本地镜像发布到阿里云流程"></a>5.1 本地镜像发布到阿里云流程</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/48.png"                      alt="48"                ></p><h4 id="5-2-镜像生成的方法"><a href="#5-2-镜像生成的方法" class="headerlink" title="5.2 镜像生成的方法"></a>5.2 镜像生成的方法</h4><blockquote><p>上一讲已经介绍过</p><p>基于当前容器创建一个新的镜像，新功能增强</p><p>docker commit [OPTIONS]容器ID [REPOSOTORY[:TAG]]</p><p><strong>OPTIONS说明：</strong> </p><p>-a :提交的镜像作者； </p><p>-m :提交时的说明文字； </p><p>本次案例centos+ubuntu两个，当堂讲解一个，家庭作业一个，请大家务必动手，亲自实操。 </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/49.png"                      alt="49"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/50.png"                      alt="50"                ></p></blockquote><h4 id="5-3-将本地镜像推送到阿里云"><a href="#5-3-将本地镜像推送到阿里云" class="headerlink" title="5.3 将本地镜像推送到阿里云"></a>5.3 将本地镜像推送到阿里云</h4><blockquote><p><strong>本地镜像素材原型</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/51.png"                      alt="51"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/52.png"                      alt="52"                ></p><p><strong>阿里云开发者平台</strong></p><p>地址：<a class="link"   href="https://promotion.aliyun.com/ntms/act/kubernetes.html" >https://promotion.aliyun.com/ntms/act/kubernetes.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>将镜像推送到阿里云</strong></p><p>将镜像推送到阿里云registry ，管理界面脚本</p><p><strong>脚本实例</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=zzyybuy registry.cn-hangzhou.aliyuncs.com </span><br><span class="line"></span><br><span class="line">docker tag cea1bb40441c registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1 </span><br><span class="line"></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1 </span><br><span class="line"></span><br><span class="line">上面命令是阳哥自己本地的，你自己酌情处理，不要粘贴我的。 </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/53.png"                      alt="53"                ></p></blockquote><h4 id="5-4-将阿里云上的镜像下载到本地"><a href="#5-4-将阿里云上的镜像下载到本地" class="headerlink" title="5.4 将阿里云上的镜像下载到本地"></a>5.4 将阿里云上的镜像下载到本地</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/54.png"                      alt="54"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1 </span><br></pre></td></tr></table></figure></div><h3 id="六、本地镜像发布到私有库"><a href="#六、本地镜像发布到私有库" class="headerlink" title="六、本地镜像发布到私有库"></a>六、本地镜像发布到私有库</h3><h4 id="6-1-本地镜像发布到私有库流程"><a href="#6-1-本地镜像发布到私有库流程" class="headerlink" title="6.1 本地镜像发布到私有库流程"></a>6.1 本地镜像发布到私有库流程</h4><blockquote><ol><li><p>下载镜像Docker Registry</p><p>docker pull registry  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/55.png"                      alt="55"                ></p><ol start="2"><li><p>运行私有库Registry，相当于本地有个私有库Docker hub</p><p>docker run -d -p 5000:5000 -v &#x2F;zzyyuse&#x2F;myregistry&#x2F;:&#x2F;tmp&#x2F;registry –privileged&#x3D;true registry </p><p>默认情况，仓库被创建在容器的&#x2F;var&#x2F;lib&#x2F;registry目录下，建议自行用容器卷映射，方便于宿主机联调</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/56.png"                      alt="56"                ></p></li><li><p>案例演示创建一个新镜像，ubuntu安装ifconfig命令</p><p>从Hub上下载ubuntu镜像到本地并成功运行</p><p> 原始Ubuntu镜像是不带着ifconfig命令的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/57.png"                      alt="57"                ></p><p>从Hub上下载ubuntu镜像到本地并成功运行</p><p> 原始Ubuntu镜像是不带着ifconfig命令的</p><p><strong>外网连通情况下，安装ifconfig命令通过测试</strong></p><p>docker容器内 执行上述两条命令： </p><p>apt-get update </p><p>apt-get install net-tools </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/58.png"                      alt="58"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/59.png"                      alt="59"                ></p><p><strong>安装完成后，commit我们自己的新镜像</strong></p><p>公式： </p><p>docker commit -m&#x3D;” 提交的描述信息 “ -a&#x3D;” 作者 “ 容器 ID 要创建的目标镜像名 :[ 标签名 ] </p><p>命令： 在容器外执行，记得 </p><p>docker commit -m&#x3D;” ifconfig cmd add “ -a&#x3D;” zzyy “ a69d7c825c4f zzyyubuntu:1.2 </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/60.png"                      alt="60"                ></p><p><strong>启动我们的新镜像并和原来的对比</strong></p><p>1.官网是默认下载的Ubuntu没有ifconfig命令 </p><p>2.我们自己commit构建的新镜像，新增加了ifconfig功能，可以成功使用。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/61.png"                      alt="61"                ></p></li><li><p>curl验证私服库上有什么镜像</p><p> curl -XGET <a class="link"   href="http://192.168.111.162:5000/v2/_catalog" >http://192.168.111.162:5000/v2/_catalog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p><p>可以看到，目前私服库没有任何镜像上传过。。。。。。 </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/62.png"                      alt="62"                ></p></li><li><p>将新镜像zzyyubuntu:1.2修改符合私服规范的Tag</p></li></ol><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">按照公式： docker   tag   镜像:Tag   Host:Port/Repository:Tag </span><br><span class="line">自己host主机IP地址，填写同学你们自己的，不要粘贴错误，O(∩_∩)O </span><br><span class="line">使用命令 docker tag 将zzyyubuntu:1.2 这个镜像修改为192.168.111.162:5000/zzyyubuntu:1.2 </span><br><span class="line">  </span><br><span class="line">docker tag  zzyyubuntu:1.2  192.168.111.162:5000/zzyyubuntu:1.2 </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/63.png"                      alt="63"                ></p><ol start="6"><li>修改配置文件使之支持http</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/64.png"                      alt="64"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">别无脑照着复制，registry-mirrors 配置的是国内阿里提供的镜像加速地址，不用加速的话访问官网的会很慢。</span><br><span class="line">2个配置中间有个逗号 &#x27;,&#x27;别漏了 ，这个配置是json格式的。 </span><br><span class="line">2个配置中间有个逗号 &#x27;,&#x27;别漏了 ，这个配置是json格式的。 </span><br><span class="line">2个配置中间有个逗号 &#x27;,&#x27;别漏了 ，这个配置是json格式的。 </span><br></pre></td></tr></table></figure></div><p>vim命令新增如下红色内容：vim &#x2F;etc&#x2F;docker&#x2F;daemon.json </p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://aa25jngu.mirror.aliyuncs.com&quot;] , </span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.111.162:5000&quot;] </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><p>上述理由：docker默认不允许http方式推送镜像，通过配置选项来取消这个限制。&#x3D;&#x3D;&#x3D;&#x3D;&gt;  修改完后如果不生效，建议重启docker </p><ol start="7"><li><p>push推送到私服库</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.111.162:5000/zzyyubuntu:1.2 </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/65.png"                      alt="65"                ></p></li><li><p>curl验证私服库上有什么镜像2</p><p>curl -XGET <a class="link"   href="http://192.168.111.162:5000/v2/_catalog" >http://192.168.111.162:5000/v2/_catalog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/66.png"                      alt="66"                ></p></li><li><p>pull到本地并运行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.111.162:5000/zzyyubuntu:1.2 </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/67.png"                      alt="67"                ></p><p>docker run -it 镜像ID &#x2F;bin&#x2F;bash </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/68.png"                      alt="68"                ></p></li></ol></li></ol></blockquote><h3 id="七、Docker容器数据卷"><a href="#七、Docker容器数据卷" class="headerlink" title="七、Docker容器数据卷"></a>七、Docker容器数据卷</h3><h4 id="7-1-坑：容器卷记得加入"><a href="#7-1-坑：容器卷记得加入" class="headerlink" title="7.1 坑：容器卷记得加入"></a>7.1 坑：容器卷记得加入</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--privileged=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因</span></span><br><span class="line">  Docker挂载主机目录访问 如果出现cannot open directory .: Permission denied </span><br><span class="line">解决办法：在挂载目录后多加一个--privileged=true参数即可 </span><br><span class="line">  </span><br><span class="line">如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为， </span><br><span class="line">在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用--privileged=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即 </span><br><span class="line">使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。 </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="7-2-回顾下上一将的知识点，参数V"><a href="#7-2-回顾下上一将的知识点，参数V" class="headerlink" title="7.2 回顾下上一将的知识点，参数V"></a>7.2 回顾下上一将的知识点，参数V</h4><p>还记得蓝色框框中的内容嘛</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/69.png"                      alt="69"                ></p><h4 id="7-3-是什么"><a href="#7-3-是什么" class="headerlink" title="7.3 是什么"></a>7.3 是什么</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一句话：有点类似我们Redis里面的rdb和aof文件</span><br><span class="line">将docker容器内的数据保存进宿主机的磁盘中</span><br><span class="line">运行一个带有容器卷存储功能的容器实例</span><br><span class="line">docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录      镜像名</span><br></pre></td></tr></table></figure></div><h4 id="7-4-能干什么"><a href="#7-4-能干什么" class="headerlink" title="7.4 能干什么"></a>7.4 能干什么</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是 持久化的 </span><br><span class="line"> </span><br><span class="line">Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。 </span><br><span class="line">为了能保存数据在docker中我们使用卷。 </span><br><span class="line">  </span><br><span class="line">特点： </span><br><span class="line">1：数据卷可在容器之间共享或重用数据 </span><br><span class="line">2：卷中的更改可以直接实时生效，爽 </span><br><span class="line">3：数据卷中的更改不会包含在镜像的更新中 </span><br><span class="line">4：数据卷的生命周期一直持续到没有容器使用它为止 </span><br></pre></td></tr></table></figure></div><h4 id="7-5-数据卷案例"><a href="#7-5-数据卷案例" class="headerlink" title="7.5 数据卷案例"></a>7.5 数据卷案例</h4><blockquote><h5 id="7-5-1-宿主vs容器之间映射添加容器卷"><a href="#7-5-1-宿主vs容器之间映射添加容器卷" class="headerlink" title="7.5.1 宿主vs容器之间映射添加容器卷"></a>7.5.1 宿主vs容器之间映射添加容器卷</h5><p><strong>直接命令添加</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">公式：docker run -it -v /宿主机目录:/容器内目录</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">ubuntu /bin/bash</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker run -it --name myu3 --privileged=<span class="literal">true</span> -v /tmp/myHostData:/tmp/myDockerData ubuntu /bin/bash</span> </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/70.png"                      alt="70"                ></p><p><strong>查看数据卷是否挂成功</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker inspect 容器ID </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/71.png"                      alt="71"                ></p><p><strong>容器和宿主机之间数据共享</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;1. docker修改，主机同步获得  </span><br><span class="line">&gt;2. 主机修改，docker同步获得 </span><br><span class="line">&gt;3. docker容器stop，主机修改，docker容器重启看数据是否同步。</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/72.png"                      alt="72"                ></p></blockquote><blockquote><h5 id="7-5-2-读写规则映射添加说明"><a href="#7-5-2-读写规则映射添加说明" class="headerlink" title="7.5.2 读写规则映射添加说明"></a>7.5.2 读写规则映射添加说明</h5><p><strong>读写(默认)</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw  镜像名</span><br><span class="line">默认同上案例，默认就是rw</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/73.png"                      alt="73"                ></p><p>默认同上案例，默认就是rw</p></blockquote><blockquote><p><strong>只读</strong></p><p>容器实例内部被限制，只能读取不能写</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/74.png"                      alt="74"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/容器目录:ro 镜像名               就能完成功能，此时容器自己只能读取不能写   </span><br><span class="line">ro = read only </span><br><span class="line">此时如果宿主机写入内容，可以同步给容器内，容器可以读取到。</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro      镜像名</span><br></pre></td></tr></table></figure></div></blockquote><blockquote><h5 id="7-5-3-卷的集成和共享"><a href="#7-5-3-卷的集成和共享" class="headerlink" title="7.5.3 卷的集成和共享"></a>7.5.3 卷的集成和共享</h5><p>容器1完成和宿主机的映射</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker run -it --privileged=<span class="literal">true</span> -v /mydocker/u:/tmp --name u1 ubuntu</span> </span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/75.png"                      alt="75"                ></p><p>容器2集成容器1的卷规则</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker run -it --privileged=<span class="literal">true</span> --volumes-from 父类 --name u2 ubuntu</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="八、Docker常规安装简介"><a href="#八、Docker常规安装简介" class="headerlink" title="八、Docker常规安装简介"></a>八、Docker常规安装简介</h3><h4 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 搜索镜像</span><br><span class="line">2. 拉去镜像</span><br><span class="line">3. 查看镜像</span><br><span class="line">4. 查看镜像</span><br><span class="line">5. 启动镜像</span><br><span class="line"> 服务端口映射</span><br><span class="line">6. 停止容器</span><br></pre></td></tr></table></figure></div><h4 id="8-2-安装tomcat"><a href="#8-2-安装tomcat" class="headerlink" title="8.2 安装tomcat"></a>8.2 安装tomcat</h4><blockquote><p>1、docker hub 上面查找tomcat镜像</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure></div><p>2、从docker hub 上拉去tomcat镜像到本地</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure></div><p>3、docker images 查看是否有拉去到tomcat</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker images tomcat</span><br></pre></td></tr></table></figure></div><p>4、使用tomcat镜像创建容器实例（也叫运行镜像）</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"></span><br><span class="line">-p 小写，主机端口:docker容器端口</span><br><span class="line"></span><br><span class="line">-P 大写，随机分配端口</span><br><span class="line"></span><br><span class="line">i:交互</span><br><span class="line"></span><br><span class="line">t:终端</span><br><span class="line"></span><br><span class="line">d:后台</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>5、访问tomcat首页</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">可能出现404 的情况</span><br><span class="line"></span><br><span class="line">解决</span><br><span class="line"></span><br><span class="line">1、可能没有映射端口或者没有关闭防火墙</span><br><span class="line">2、把webapps.dist 目录换成webapps </span><br><span class="line">先成功启动tomcat</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/76.png"                      alt="76"                ></p><p>查看webapps文件夹查看为空</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/77.png"                      alt="77"                ></p><p>6、免修改版说明</p><p>docker pull billygoo&#x2F;tomcat8-jdk8</p><p>Docker run -d -p 8080:8080 –name mytomcat8 billygoo&#x2F;tomcat8-djk8</p></blockquote><h4 id="8-3-安装mysql"><a href="#8-3-安装mysql" class="headerlink" title="8.3 安装mysql"></a>8.3 安装mysql</h4><blockquote><p>1、docker hub上面查找mysql镜像</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker search mysql</span><br></pre></td></tr></table></figure></div><p>2、从docker hub上（阿里云加速器）拉去mysql镜像到本地标签为5.7 </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure></div><p>3、使用mysql5.7 镜像创建容器（也叫运行镜像）</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、命令出处，哪里来的</span></span><br><span class="line">地址：https://hub.docker.com/_/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、简单版</span></span><br><span class="line">docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 </span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/78.png"                      alt="78"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、 建库建表插入数据</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/79.png"                      alt="79"                ></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">外部Win10也来连接运行在dokcer上的mysql容器实例服务</span><br><span class="line">【问题】</span><br><span class="line">插入中文数据试试，为什么报错？ docker 上默认字符集编码隐患</span><br><span class="line"></span><br><span class="line"> docker里面的mysql容器实例查看，内容如下： </span><br><span class="line"> SHOW VARIABLES LIKE &#x27;character%&#x27; </span><br><span class="line"> </span><br><span class="line"> 删除容器后，里面的mysql数据如何办</span><br><span class="line"> </span><br><span class="line"> 容器实例一删除，你还有什么？</span><br><span class="line">删容器到跑路。。。。。？</span><br></pre></td></tr></table></figure></div><p>【实战版】</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、新建mysql容器实例</span></span><br><span class="line">docker run -d -p 3306:3306 --privileged=true -v /zzyyuse/mysql/log:/var/log/mysql -v /zzyyuse/mysql/data:/var/lib/mysql -v /zzyyuse/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql mysql:5.7 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、新建my.cnf  通过容器卷同步给MySQL容器实例</span></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8 </span><br><span class="line">[mysqld] </span><br><span class="line">collation_server = utf8_general_ci </span><br><span class="line">character_set_server = utf8 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、重新启动mysql容器实例在重新进入并查看字符编码</span></span><br><span class="line">docker restart mysql</span><br><span class="line"></span><br><span class="line">docker exec -it mysql_bash</span><br><span class="line"></span><br><span class="line">show variables like &#x27;character%&#x27;;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4、再新建库新建表再插入中文测试</span></span><br><span class="line">完全正常</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5、结论</span></span><br><span class="line">之前的DB  无效 </span><br><span class="line">修改字符集操作+重启mysql容器实例 </span><br><span class="line">之后的DB  有效，需要新建 </span><br><span class="line">结论： docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6、假如将当前容器实例删除，再重新来一次，之前建的db01实例还有吗？trytry</span></span><br></pre></td></tr></table></figure></div></blockquote><h4 id="8-4-安装redis"><a href="#8-4-安装redis" class="headerlink" title="8.4 安装redis"></a>8.4 安装redis</h4><blockquote><p>1、从docker hub上（阿里云加速器）拉去redis镜像到本地标签6.0.8</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 拉去镜像</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker pull redis:6.0.8</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 查看镜像</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker images</span></span><br></pre></td></tr></table></figure></div><p>2、入门命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 启动命令</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker run -d -p 6379:6379 redis:6.0.8</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># docker ps</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 后台启动</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker <span class="built_in">exec</span> -it CONTAINER ID /bin/bash</span></span><br></pre></td></tr></table></figure></div><p>3、命令提醒：容器卷记得加入 –privileged&#x3D;true</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied </span><br><span class="line">&gt;解决办法：在挂载目录后多加一个--privileged=true参数即可 </span><br></pre></td></tr></table></figure></div><p>4、在CentOS宿主机下新建目录&#x2F;app&#x2F;redis </p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 新建目录</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">mkdir</span> -p /app/redis</span></span><br></pre></td></tr></table></figure></div><p>5、将一个redis.conf文件模板拷贝进 &#x2F;app&#x2F;redis目录下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">mkdir</span> -p /app/redis</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">cp</span> /myredis/redis.conf  /app/redis/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">cp</span> /app/redis</span></span><br></pre></td></tr></table></figure></div><p>6、&#x2F;app&#x2F;redis 目录下修改redis.conf</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 修改redis.conf文件</span></span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">/app/redis目录下修改redis.conf文件</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">开启redis验证     可选</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">requirepass 123</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">允许redis外地连接  必须</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">注释掉 <span class="comment"># bind 127.0.0.1</span></span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 注释daemonize no</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">daemonize no</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">将daemonize <span class="built_in">yes</span>注释起来或者 daemonize no设置，因为该配置和docker run中-d参数冲突，会导致容器一直启动失败</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 开启redis数据持久化</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">appendonly <span class="built_in">yes</span>  可选</span> </span><br></pre></td></tr></table></figure></div><p>7、使用redis6.0.8 镜像创建容器(也叫运行镜像)</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">docker run  -p 6379:6379 --name myr3 --privileged=<span class="literal">true</span> -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span> </span><br></pre></td></tr></table></figure></div><p>8、测试redis-cli连接上</p><p>docker exec -it 运行着Rediis服务的容器ID redis-cli </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/81.png"                      alt="81"                ></p><p>9、请证明docker启动使用了我们自己指定的配置文件</p><p>【修改前】</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/82.png"                      alt="82"                ></p><p>【修改后】</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/83.png"                      alt="83"                ></p><p>10、测试redis-cli连接上来第2次</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/84.png"                      alt="84"                ></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker-详细教程&quot;&gt;&lt;a href=&quot;#Docker-详细教程&quot; class=&quot;headerlink&quot; title=&quot;Docker 详细教程&quot;&gt;&lt;/a&gt;Docker 详细教程&lt;/h3&gt;&lt;h3 id=&quot;一、Docker简介&quot;&gt;&lt;a href=&quot;#一、Docke</summary>
      
    
    
    
    
  </entry>
  
</feed>
